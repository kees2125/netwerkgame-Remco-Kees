#include "DefaultLevel.h"

#include <blib/linq.h>

#include "Enemy.h"
#include "FollowGhost.h"

#include <blib/Color.h>

namespace pacman
{
	std::vector<std::vector<int> > DefaultLevel::getLevel()
	{
		int level[31][56] = {
			{5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,	5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
			{5,2,2,2,2,2,2,2,2,2,2,2,2,1,1,2,2,2,2,2,2,2,2,2,2,2,2,5,	5,2,2,2,2,2,2,2,2,2,2,2,2,1,1,2,2,2,2,2,2,2,2,2,2,2,2,5},
			{5,2,1,1,1,1,2,1,1,1,1,1,2,1,1,2,1,1,1,1,1,2,1,1,1,1,2,5,	5,2,1,1,1,1,2,1,1,1,1,1,2,1,1,2,1,1,1,1,1,2,1,1,1,1,2,5},
			{5,2,1,1,1,1,2,1,1,1,1,1,2,1,1,2,1,1,1,1,1,2,1,1,1,1,2,5,	5,2,1,1,1,1,2,1,1,1,1,1,2,1,1,2,1,1,1,1,1,2,1,1,1,1,2,5},
			{5,2,1,1,1,1,2,1,1,1,1,1,2,1,1,2,1,1,1,1,1,2,1,1,1,1,2,5,	5,2,1,1,1,1,2,1,1,1,1,1,2,1,1,2,1,1,1,1,1,2,1,1,1,1,2,5},
			{5,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,5,	5,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,5},
			{5,2,1,1,1,1,2,1,1,2,1,1,1,1,1,1,1,1,2,1,1,2,1,1,1,1,2,5,	5,2,1,1,1,1,2,1,1,2,1,1,1,1,1,1,1,1,2,1,1,2,1,1,1,1,2,5},
			{5,2,1,1,1,1,2,1,1,2,1,1,1,1,1,1,1,1,2,1,1,2,1,1,1,1,2,5,	5,2,1,1,1,1,2,1,1,2,1,1,1,1,1,1,1,1,2,1,1,2,1,1,1,1,2,5},
			{5,2,2,2,2,2,2,1,1,2,2,2,2,1,1,2,2,2,2,1,1,2,2,2,2,2,2,5,	5,2,2,2,2,2,2,1,1,2,2,2,2,1,1,2,2,2,2,1,1,2,2,2,2,2,2,5},
			{5,5,5,5,5,5,2,1,1,1,1,1,0,1,1,0,1,1,1,1,1,2,5,5,5,5,5,5,	5,5,5,5,5,5,2,1,1,1,1,1,0,1,1,0,1,1,1,1,1,2,5,5,5,5,5,5},
			{1,1,1,1,1,5,2,1,1,1,1,1,0,1,1,0,1,1,1,1,1,2,5,1,1,1,1,1,	1,1,1,1,1,5,2,1,1,1,1,1,0,1,1,0,1,1,1,1,1,2,5,1,1,1,1,1},
			{1,1,1,1,1,5,2,1,1,0,0,0,0,0,0,0,0,0,0,1,1,2,5,1,1,1,1,1,	1,1,1,1,1,5,2,1,1,0,0,0,0,0,0,0,0,0,0,1,1,2,5,1,1,1,1,1},
			{1,1,1,1,1,5,2,1,1,0,5,5,5,5,5,5,5,5,0,1,1,2,5,1,1,1,1,1,	1,1,1,1,1,5,2,1,1,0,5,5,5,5,5,5,5,5,0,1,1,2,5,1,1,1,1,1},
			{5,5,5,5,5,5,2,1,1,0,5,1,1,1,1,1,1,5,0,1,1,2,5,5,5,5,5,5,	5,5,5,5,5,5,2,1,1,0,5,1,1,1,1,1,1,5,0,1,1,2,5,5,5,5,5,5},
			{5,0,0,0,0,0,2,0,0,0,5,1,1,1,1,1,1,5,0,0,0,2,0,0,0,0,0,0,	0,0,0,0,0,0,2,0,0,0,5,1,1,1,1,1,1,5,0,0,0,2,0,0,0,0,0,5},
			{5,5,5,5,5,5,2,1,1,0,5,1,1,1,1,1,1,5,0,1,1,2,5,5,5,5,5,5,	5,5,5,5,5,5,2,1,1,0,5,1,1,1,1,1,1,5,0,1,1,2,5,5,5,5,5,5},
			{1,1,1,1,1,5,2,1,1,0,5,5,5,5,5,5,5,5,0,1,1,2,5,1,1,1,1,1,	1,1,1,1,1,5,2,1,1,0,5,5,5,5,5,5,5,5,0,1,1,2,5,1,1,1,1,1},
			{1,1,1,1,1,5,2,1,1,0,0,0,0,0,0,0,0,0,0,1,1,2,5,1,1,1,1,1,	1,1,1,1,1,5,2,1,1,0,0,0,0,0,0,0,0,0,0,1,1,2,5,1,1,1,1,1},
			{1,1,1,1,1,5,2,1,1,0,1,1,1,1,1,1,1,1,0,1,1,2,5,1,1,1,1,1,	1,1,1,1,1,5,2,1,1,0,1,1,1,1,1,1,1,1,0,1,1,2,5,1,1,1,1,1},
			{5,5,5,5,5,5,2,1,1,0,1,1,1,1,1,1,1,1,0,1,1,2,5,5,5,5,5,5,	5,5,5,5,5,5,2,1,1,0,1,1,1,1,1,1,1,1,0,1,1,2,5,5,5,5,5,5},
			{5,2,2,2,2,2,2,2,2,2,2,2,2,1,1,2,2,2,2,2,2,2,2,2,2,2,2,5,	5,2,2,2,2,2,2,2,2,2,2,2,2,1,1,2,2,2,2,2,2,2,2,2,2,2,2,5},
			{5,2,1,1,1,1,2,1,1,1,1,1,2,1,1,2,1,1,1,1,1,2,1,1,1,1,2,5,	5,2,1,1,1,1,2,1,1,1,1,1,2,1,1,2,1,1,1,1,1,2,1,1,1,1,2,5},
			{5,2,1,1,1,1,2,1,1,1,1,1,2,1,1,2,1,1,1,1,1,2,1,1,1,1,2,5,	5,2,1,1,1,1,2,1,1,1,1,1,2,1,1,2,1,1,1,1,1,2,1,1,1,1,2,5},
			{5,2,2,2,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,2,2,2,5,	5,2,2,2,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,2,2,2,5},
			{5,1,1,2,1,1,2,1,1,2,1,1,1,1,1,1,1,1,2,1,1,2,1,1,2,1,1,5,	5,1,1,2,1,1,2,1,1,2,1,1,1,1,1,1,1,1,2,1,1,2,1,1,2,1,1,5},
			{5,1,1,2,1,1,2,1,1,2,1,1,1,1,1,1,1,1,2,1,1,2,1,1,2,1,1,5,	5,1,1,2,1,1,2,1,1,2,1,1,1,1,1,1,1,1,2,1,1,2,1,1,2,1,1,5},
			{5,2,2,2,2,2,2,1,1,2,2,2,2,1,1,2,2,2,2,1,1,2,2,2,2,2,2,5,	5,2,2,2,2,2,2,1,1,2,2,2,2,1,1,2,2,2,2,1,1,2,2,2,2,2,2,5},
			{5,2,1,1,1,1,1,1,1,1,1,1,2,1,1,2,1,1,1,1,1,1,1,1,1,1,2,5,	5,2,1,1,1,1,1,1,1,1,1,1,2,1,1,2,1,1,1,1,1,1,1,1,1,1,2,5},
			{5,2,1,1,1,1,1,1,1,1,1,1,2,1,1,2,1,1,1,1,1,1,1,1,1,1,2,5,	5,2,1,1,1,1,1,1,1,1,1,1,2,1,1,2,1,1,1,1,1,1,1,1,1,1,2,5},
			{5,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,5,	5,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,5},
			{5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,	5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5}
		};

		std::vector<std::vector<int> > ret;
		for(size_t i = 0; i < 31; i++)
			ret.push_back(std::vector<int>(level[i], level[i]+56));
		return ret;
	}

	std::vector<glm::vec2> DefaultLevel::getPlayerPositions()
	{
		std::vector<glm::vec2> ret;
		ret.push_back(glm::vec2(32*14, 32*5));
		ret.push_back(glm::vec2(32*14, 32*23));
		ret.push_back(glm::vec2(32*42, 32*5));
		ret.push_back(glm::vec2(32*42, 32*23));

		ret.push_back(glm::vec2(32*14, 32*29));
		ret.push_back(glm::vec2(32*42, 32*29));
		ret.push_back(glm::vec2(32*6,  32*14));
		ret.push_back(glm::vec2(32*49, 32*14));
		return ret;
	}

	bool DefaultLevel::inPen( int x, int y )
	{
		if (x > 11 && x < 16 && y == 14)
			return true;
		if (x > 11 + 28 && x < 16 + 28 && y == 14)
			return true;
		return false;
	}

	std::vector<glm::vec2> DefaultLevel::getScorePositions()
	{
		std::vector<glm::vec2> ret;
		ret.push_back(glm::vec2(32*1, 32*10 + 16));
		ret.push_back(glm::vec2(32*1, 32*16 + 16));
		ret.push_back(glm::vec2(32*54, 32*10 + 16));
		ret.push_back(glm::vec2(32*54, 32*16 + 16));

		ret.push_back(glm::vec2(32*24, 32*10 + 16));
		ret.push_back(glm::vec2(32*24, 32*16 + 16));
		ret.push_back(glm::vec2(32*31, 32*10 + 16));
		ret.push_back(glm::vec2(32*31, 32*16 + 16));

		return ret;
	}

	std::vector<Enemy*> DefaultLevel::getEnemies()
	{
		std::vector<Enemy*> ret;

		ret.push_back(new FollowGhost(glm::vec2(13, 11),		glm::vec2(1,0),		blib::Color::red, 2));
		ret.push_back(new FollowGhost(glm::vec2(12, 14),		glm::vec2(1,0),		blib::Color::yellow, 0));
		ret.push_back(new FollowGhost(glm::vec2(13, 14),		glm::vec2(1,0),		blib::Color::green, 0));
		ret.push_back(new FollowGhost(glm::vec2(14, 14),		glm::vec2(1,0),		blib::Color::blue, 0));

		ret.push_back(new FollowGhost(glm::vec2(42, 11),		glm::vec2(1,0),		blib::Color::red, 2));
		ret.push_back(new FollowGhost(glm::vec2(40, 14),		glm::vec2(1,0),		blib::Color::yellow, 0));
		ret.push_back(new FollowGhost(glm::vec2(41, 14),		glm::vec2(1,0),		blib::Color::green, 0));
		ret.push_back(new FollowGhost(glm::vec2(42, 14),		glm::vec2(1,0),		blib::Color::blue, 0));

		return ret;	
	}

	bool DefaultLevel::isWalkable( int x, int y, const std::vector<Enemy*> &enemies, float gameTime, Enemy* enemy /*= NULL */ )
	{
		if (enemy != NULL)
		{
			int ghostsInLeft = blib::linq::count(enemies, [] (Enemy* e) { return e->inPenStatus == 0 && e->point().x > 11 && e->point().x < 17 && (e->point().y == 14 || e->point().y == 13); });
			int ghostsInRight = blib::linq::count(enemies, [] (Enemy* e) { return e->inPenStatus == 0 && e->point().x > 11 + 28 && e->point().x < 17 + 28 && (e->point().y == 14 || e->point().y == 13); });
			int ghostInPen = (int)glm::max(0.0f, enemies.size()/8.0f*4 - gameTime/5.0f);

			if (inPen(x, y))
				return true;

			if (x == 14 && (y == 13 || y == 12) && (ghostsInLeft != ghostInPen))
				return true;
			if (x == 14 + 28 && (y == 13 || y == 12) && (ghostsInRight != ghostInPen))
				return true;

			if(enemy->inPenStatus == 1 && ((x == 14 && (y == 13 || y == 12)) || (x == 14 + 28 && (y == 13 || y == 12))))
				return true;

			if (enemy->inPenStatus == 1 && !inPen(enemy->point().x, enemy->point().y) && !(enemy->point().x == 14 && (enemy->point().y == 13 || enemy->point().y == 12)) && !(enemy->point().x == 14 + 28 && (enemy->point().y == 13 || enemy->point().y == 12)))
				enemy->inPenStatus = 2;
		}


		return PacManLevel::isWalkable(x, y, enemies, gameTime);
	}

}